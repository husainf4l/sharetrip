generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TRAVELER
  HOST
  EXPLORER
}

// Main user table
model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String                 @unique
  passwordHash          String?
  image                 String?
  role                  Role                   @default(TRAVELER)
  travelStyle           String?
  createdAt             DateTime               @default(now())
  guideProfile          GuideProfile?
  preferences           Preference?
  bookings              Booking[]
  alerts                Alert[]
  refreshTokens         RefreshToken[]
  verificationTokens    VerificationToken[]
  hostApplication       HostApplication?
  cart                  Cart?
  wishlist              Wishlist?
  accommodations        Accommodation[]
  accommodationBookings AccommodationBooking[]
}

model GuideProfile {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @unique
  bio             String?
  kycStatus       String           @default("unverified")
  payoutMethod    String?
  stripeAccountId String?
  ratingAvg       Float?           @default(0)
  toursCount      Int              @default(0)
  tours           Tour[]
  hostApplication HostApplication?
}

model Tour {
  id               String       @id @default(uuid())
  guide            GuideProfile @relation(fields: [guideId], references: [id])
  guideId          String
  title            String
  city             String
  country          String
  category         String // SHARE_TRIP, PRIVATE, GROUP, etc.
  description      String?
  startTimes       Json? // Array of DateTime strings
  basePrice        Int // Price in cents
  currency         String       @default("USD")
  minGroup         Int
  maxGroup         Int
  durationMins     Int
  language         String
  languages        Json? // Multi-language support
  isPayWhatYouWant Boolean      @default(false)
  isPublished      Boolean      @default(false)
  status           String       @default("draft")
  createdAt        DateTime     @default(now())

  // Enhanced filtering fields
  travelStyles       Json? // relaxed, adventurous, foodie, culture, nightlife, family
  accessibility      Json? // wheelchair-friendly, low-walking, kid-friendly, women-only
  startWindow        String? // morning, afternoon, evening
  instantBook        Boolean @default(false)
  hostRating         Float?  @default(0)
  cancellationPolicy String  @default("standard") // flexible, standard, strict

  // Deal states
  isDropIn    Boolean @default(false) // <2h to start
  isEarlyBird Boolean @default(false) // 1-2 weeks ahead discount

  // Location details
  latitude     Float?
  longitude    Float?
  meetingPoint String?

  // SEO and searchability
  tags           Json?
  searchKeywords Json?

  // Additional tour details
  whatsIncluded  Json?
  whatsExcluded  Json?
  requirements   Json?
  highlights     Json?
  itinerary      String?
  difficulty     String?
  ageRestriction Int?

  media         TourMedia[]
  bookings      Booking[]
  groupFill     GroupFill?
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}

model TourMedia {
  id     String @id @default(uuid())
  tour   Tour   @relation(fields: [tourId], references: [id])
  tourId String
  url    String
  type   String
}

model Booking {
  id             String   @id @default(uuid())
  tour           Tour     @relation(fields: [tourId], references: [id])
  tourId         String
  traveler       User     @relation(fields: [travelerId], references: [id])
  travelerId     String
  status         String   @default("pending")
  priceAtBooking Int
  headcount      Int      @default(1)
  createdAt      DateTime @default(now())
}

model RefreshToken {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  tokenHash    String
  expiresAt    DateTime
  revoked      Boolean  @default(false)
  replacedById String?
  createdAt    DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  type      String // email_verify | password_reset
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model HostApplication {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
  guideProfile    GuideProfile? @relation(fields: [guideProfileId], references: [id])
  guideProfileId  String?       @unique
  status          String        @default("draft") // draft | submitted | approved | rejected
  currentStep     Int           @default(1)
  phoneVerified   Boolean       @default(false)
  kycSubmitted    Boolean       @default(false)
  payoutConnected Boolean       @default(false)
  data            Json? // saves form draft data across steps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model GroupFill {
  id              String   @id @default(uuid())
  tour            Tour     @relation(fields: [tourId], references: [id])
  tourId          String   @unique
  currentCount    Int      @default(0)
  targetCount     Int
  dynamicPrice    Int // Current price in cents based on group size
  maxGroupPrice   Int // Price at full group in cents
  priceReductions Json? // Price tier structure
  spotsLeft       Int      @default(0) // Computed field: targetCount - currentCount
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

model Preference {
  id                 String  @id @default(uuid())
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique
  budgetMin          Int?
  budgetMax          Int?
  categories         Json?
  cities             Json?
  countries          Json?
  preferredGroupSize String?
  flexibleDates      Boolean @default(false)

  // Enhanced filtering preferences
  preferredLanguages Json?
  travelStyles       Json? // relaxed, adventurous, foodie, culture, nightlife, family
  accessibility      Json? // wheelchair-friendly, low-walking, kid-friendly, women-only
  preferredDuration  Json? // 30-60m, 1-2h, 3-4h, full-day
  startWindows       Json? // morning, afternoon, evening
  cancellationPolicy Json? // flexible, standard, strict
  maxBudgetAtFull    Boolean @default(false) // Consider max price at full group
  minHostRating      Float?  @default(0)
  instantBookOnly    Boolean @default(false)

  // Notification preferences
  notifyDropIns    Boolean @default(true)
  notifyEarlyBird  Boolean @default(true)
  notifyPriceDrops Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Alert {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Payout {
  id          String   @id @default(uuid())
  guideId     String
  bookingId   String?
  amount      Int
  status      String   @default("pending")
  externalRef String?
  createdAt   DateTime @default(now())
}

model Referral {
  id             String @id @default(uuid())
  referrerId     String
  referredUserId String
  status         String
  creditAmount   Int
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  promoCode String?
  discount  Int        @default(0) // Discount amount in cents
  total     Int        @default(0) // Total amount in cents
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
}

model CartItem {
  id         String    @id @default(uuid())
  cart       Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String
  tour       Tour      @relation(fields: [tourId], references: [id])
  tourId     String
  quantity   Int       @default(1)
  priceAtAdd Int // Price at the time of adding to cart in cents
  headcount  Int       @default(1) // Number of people for this booking
  startTime  DateTime? // Selected start time for the tour
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([cartId, tourId])
}

model Wishlist {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  tours     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId])
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId String
  tour       Tour     @relation(fields: [tourId], references: [id])
  tourId     String
  addedAt    DateTime @default(now())

  @@unique([wishlistId, tourId])
}

model Category {
  id             String          @id @default(uuid())
  type           String          @unique // hotel, apartment, resorts, hostels, etc.
  title          String
  subtitle       String
  image          String
  sectionTitle   String
  message        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accommodations Accommodation[]
}

model Accommodation {
  id          String   @id @default(uuid())
  title       String
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  host        User     @relation(fields: [hostId], references: [id])
  hostId      String

  // Location details
  city      String
  country   String
  address   String?
  latitude  Float?
  longitude Float?

  // Pricing
  basePrice Int // Price in cents
  currency  String @default("USD")

  // Capacity
  maxGuests Int
  bedrooms  Int?
  bathrooms Int?

  // Features and amenities
  amenities Json? // WiFi, parking, pool, etc.
  images    Json? // Array of image URLs

  // Additional details
  roomTypes              Json?
  languagesSpoken        Json?
  neighborhoodHighlights Json?
  roomSize               Json?
  checkInOutTimes        Json?
  cancellationPolicy     String?
  safetyCompliance       Json?
  starRating             Json?

  // Availability
  isAvailable Boolean @default(true)
  isPublished Boolean @default(false)
  status      String  @default("active") // active, inactive, maintenance

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings AccommodationBooking[]
}

model AccommodationBooking {
  id              String        @id @default(uuid())
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId String
  traveler        User          @relation(fields: [travelerId], references: [id])
  travelerId      String

  // Booking details
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  totalPrice Int // Price in cents
  currency   String   @default("USD")

  // Status
  status        String @default("pending") // pending, confirmed, cancelled, completed
  paymentStatus String @default("pending") // pending, paid, refunded

  // Special requests
  specialRequests String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
